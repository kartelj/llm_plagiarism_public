The cloud computing model, akin to the network computing model, relies on resource clustering and the application of network and Internet technologies. Essentially, cloud computing signifies a novel method of providing computing resources as a service, including data, software, and hardware components (processing elements, memory, and storage). Cloud computing is a significant and contemporary multidisciplinary field, with numerous papers published in top-tier international journals and presented at globally recognized international conferences. Based on the scientific findings from these papers, it's clear that the cloud environment presents numerous challenges and issues that can be more effectively addressed through enhanced methods, techniques, and algorithms. A key challenge in cloud computing is scheduling end users' requests on a finite set of resources (virtual machines). A scheduling issue in a cloud environment can be described as a task execution schedule on a finite set of resources, considering potential constraints and the objective function. Task scheduling is carried out by scheduling algorithms, which can be static or dynamic. In static scheduling, where dynamic task switching from overused to underused virtual machines isn't possible, tasks are allocated for execution on available virtual machines prior to the scheduling algorithm execution. In contrast, dynamic scheduling methods, also known as load balancing approaches, allocate workloads between active virtual machines during the scheduling algorithm runtime. Request redistribution is achieved by dynamically switching from overused to less used virtual machines. Heuristics and metaheuristics optimization methods are primarily used for dynamic scheduling, where they have demonstrated excellent results. Task scheduling and load balancing issues in cloud computing are part of the NP hard combinatorial and/or global problems group, with or without constraints. Based on published findings, swarm intelligence metaheuristics have been successfully tested on benchmark and practical NP hard optimization problems, outperforming other methods, techniques, and algorithms in terms of convergence speed and solution quality. This doctoral thesis investigates the potential for further improving task scheduling and load balancing in cloud computing through the application of swarm intelligence metaheuristics. The research involved enhancing and adapting several swarm intelligence metaheuristics for solving task scheduling and load balancing issues in the cloud environment. The dissertation presents the implementation of two enhanced swarm intelligence algorithms - the monarch butterfly optimization algorithm and whale optimization algorithm. Two task scheduling models were examined. The first model is a single-objective optimization, where the goal is to minimize the execution time of all tasks on the cloud. The second model is a multi-objective optimization, aiming to minimize both the execution time of all tasks on the cloud and the total cost of used cloud resources. Simulations were conducted in a robust CloudSim simulator environment, and both algorithms were tested against a set of artificial data (generated within the CloudSim platform) and real data (sourced from a globally accessible benchmark database). In addition to testing swarm intelligence algorithms on practical cloud problems, the improved metaheuristics were also validated against standard benchmark sets for unconstrained global optimization to accurately measure their enhancements over the original versions. By comparing the results (solution quality and convergence rate) of the improved metaheuristics with the results of the best known metaheuristics and heuristics from the literature, applied to the same problem instances (for practical cloud scheduling problem and benchmark tests), the quality of the proposed metaheuristics was validated. This confirmed the dissertation's primary hypothesis that task scheduling and load balancing in cloud computing can be further improved by using swarm intelligence algorithms.