The number of digital devices in today's homes that can connect to the internet, including mobile devices like smartphones and tablets, as well as digital TVs and set-top boxes, has significantly risen in recent years. These readily available, customizable devices simplify the development of distributed applications. Apps developed in an integrated environment can provide new human-computer interaction scenarios that a single device can't. A study of current Human-Computer Interaction (HCI) systems that merge digital TV and mobile devices in a living room setting revealed that these systems have ad-hoc setups with limited flexibility and can't explore various HCI scenario combinations. This thesis introduces the SHARP development framework for efficient implementation of distributed systems in an integrated environment composed of digital TV, mobile devices, and the internet. The framework aims to help HCI researchers create innovative apps that provide various HCI scenario combinations in the living room with less effort. The dissertation begins with a survey overview of existing HCI systems for the living room. Common features of these systems are identified, and a list of potential HCI scenarios that apps developed for an integrated environment can offer is compiled. After identifying the scenarios, a proposal for the SHARP development framework is outlined, including design and implementation details. The SHARP framework's design lets developers create apps that combine the identified scenarios. The field of game development was chosen to test the framework's benefits. Game apps have proven to be popular and profitable. Five games were developed using the SHARP framework to demonstrate its flexibility and showcase new apps that offer new scenario combinations to users. Conclusions were drawn about user acceptance of the identified scenarios by analyzing the experiences of 59 test users interacting with the developed game apps. The SHARP framework was validated by comparing the size, complexity, and responsiveness of apps developed with and without the framework. The results indicate that the framework reduced both development and testing effort by shifting complex game implementation logic to reusable framework components. Responsiveness measurements from the apps developed with and without the framework revealed that while the framework's use slightly increased response time, all versions' response times were within acceptable performance parameters.