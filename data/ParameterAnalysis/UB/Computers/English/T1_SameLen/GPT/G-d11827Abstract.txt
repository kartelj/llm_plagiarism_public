The study hypothesized that chip multiprocessorsâ€™ (CMP) resources along with additional hardware or software for Thread Level Speculation (TLS) could be utilized for executing prevalent sequential applications. However, some CMPs with TLS support necessitate considerable hardware and software resources for conducting particular operations during speculative execution of such applications. A comprehensive and meticulous comparative study of current speculative CMPs was conducted, emphasizing on hardware and software backing for speculating on register and memory levels. Existing systems were classified based on register level communication support, register file organization, and interconnection topology. Comparative analysis was then conducted on registration communication mechanisms, misspeculation recovery techniques, and performance and scalability. Systems were further classified based on memory level communication support, memory hierarchy organization, and complexity of hardware and software support for speculation. Factors leading to performance degradation such as burst traffic on thread commitment and unsuitable cache memory replacement algorithm were considered. Following the analysis, the research proposes a CMP with simple TLS support that facilitates communication between speculative threads on both register and memory levels. Proposed speculative CMP takes into account systems with generic architectures and includes support for register and memory speculative communication. It comprises four processing cores with private L1 caches for data and instruction, all connected to a shared L2 cache via a shared bus. Speculative parallelization is implemented at loop level, and speculative threads correspond to loop iterations. Speculative threads are identified using a binary annotator without needing to recompile the source code. The tool also annotates write instructions to loop-alive registers for the controlling protocol's purpose. Produced speculative memory values are retained in private L1 caches, whereas a shared cache keeps sequential state. Data transfer to L2 cache from memory values only occurs after a thread becomes non-speculative. A speculative thread can read data from a non-speculative thread or an upcoming or preceding speculative thread. The proposed solution is equipped with support for identifying data dependence violations and recovery from misspeculation. Two protocols proposed for register communication are the basic SIC protocol and its advanced version, the ESIC protocol. The ESIC protocol offers potential performance gain due to reduced consumer threads blocking, and it directly depends on the possible outcome of the forwarded register value. Misspeculation may result in thread squashing, damaging performance. Profiler-provided data on successful speculation can be used to mitigate thread squashing frequency. Both SIC and ESIC protocols feature a distributed arbitration mechanism to identify supplier threads efficiently. Read-snarfing technique reduces the quantity of invalidation misses for non loop-alive registers in SIC and ESIC protocols. Both protocols are scalable; the size of the local directory and hardware support remain nearly constant as the number of processor cores increases. Three variants of memory protocols integrating cache coherence with speculation support are proposed. The invalidation-based SISC-WI protocol, which uses 13 states, allows only consumer-initiated communication among speculative threads. The SISC-WI-RS protocol aims to lessen invalidation misses by employing read-snarfing technique. The update-based 9-state SISC-WU protocol permits both producer- and consumer-initiated intercommunication among speculative threads. A bit per word in L1 cache indicates if the word is stale, in addition to state bits. Modified cache memory replacement algorithm, which takes into account a word's state first, is used in all three memory protocols. A speculative thread can replace a word modified and committed to the L1 cache during speculative write or read operations as the word is the only copy. Words not speculatively read or altered are considered for replacement, preventing unnecessary speculative run stalling. A novel simulation environment based on the UNISIM modular cycle-level simulator was created for implementation and evaluation analysis of the proposed support.  The implementation of SISC-WI protocol in the simulation environment validated the proposal.