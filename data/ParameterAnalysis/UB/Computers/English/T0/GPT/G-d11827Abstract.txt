This study hypothesizes that chip multiprocessors (CMP) resources, supplemented with hardware and/or software for Thread Level Speculation (TLS), can be utilized for executing prevalent sequential applications. However, some CMPs with TLS support necessitate significant additional hardware and software resources for specific operations during speculative execution of sequential applications. Therefore, a comprehensive and detailed comparative analysis of speculative CMPs is conducted, focusing on hardware and software support for speculation at both register and memory levels. 

Existing systems are categorized based on register level communication support, register file organization, and interconnection topology. A comparative analysis of registration communication mechanisms, misspeculation recovery techniques, and performance and scalability is then presented. Systems are also classified according to memory level communication support and the organization of the memory hierarchy. The complexity of hardware and software support for speculation is then discussed, along with potential causes for performance degradation. 

Based on this analysis, a CMP with simpler TLS support is proposed to improve cost/performance and eliminate observed inefficiencies. This CMP allows communication between speculative threads at both register and memory levels. It comprises four processing cores with private data and instruction L1 caches, connected by a shared bus to a shared L2 cache. Speculative parallelization is implemented at the loop level, with speculative threads corresponding to loop iterations. 

Two protocols are proposed for register communication: the basic SIC protocol and its extended version, the ESIC protocol. A qualitative comparison indicates potential performance gains with the ESIC protocol due to reduced consumer thread blocking. 

Three variants of memory protocols integrating cache coherence with speculation support are proposed. The first, the SISC-WI protocol, is invalidation-based and uses 13 states. The second, the SISC-WI-RS protocol, reduces invalidation misses using a read-snarfing technique. The third, the SISC-WU protocol, is update-based and uses 9 states. 

A new simulation environment based on the UNISIM modular cycle-level simulator is developed for implementation and evaluation analysis of the proposed support. The SISC-WI protocol is chosen for implementation in this simulation environment, requiring extensive modification of existing UNISIM simulator modules. A speculative multi-core MIPS architecture is simulated, and three new modules are included: Scheduler, Squash Arbiter, and Supplier Arbiter. The implementation of the SISC-WI protocol in the simulation environment validates the concept.