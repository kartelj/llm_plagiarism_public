The study hypothesized that chip multiprocessors (CMP) resources can be harnessed for running prevailing sequential applications with additional hardware or software support for Thread Level Speculation (TLS). Nevertheless, some CMPs with TLS support demand significant additional hardware and software resources for specific operations during speculative execution of sequential applications. A thorough comparative analysis of speculative CMPs was conducted, focusing on hardware and software support for speculation at register and memory levels. Existing systems were categorized based on register file organization and interconnection topology, and a comparative analysis of registration communication mechanisms, misspeculation recovery techniques, and performance and scalability was presented. The organization of the memory hierarchy was used to classify systems concerning memory level communication support, and the complexity of hardware and software support for speculation was discussed. Issues causing performance degradation such as burst traffic on thread commit and inappropriate replacement algorithm for cache memories were examined. The research proposes a simpler CMP with TLS support, enhancing cost/performance and eliminating inefficiencies. This speculative CMP consists of four processing cores with private data and instruction L1 caches connected by a shared bus to a shared L2 cache. It supports speculative parallelization at the loop level with speculative threads corresponding to the loop iterations. The research also introduces two protocols for register communication, the basic SIC protocol and its extended version, the ESIC protocol. The ESIC protocol offers potential performance gains due to reduced blocking of consumer threads. A mechanism of distributed arbitration for efficiently finding the data supplier threads is employed by both protocols. Three variants of memory protocols integrating cache coherence with speculation support are proposed. The study also presents a new simulation environment based on the UNISIM modular cycle-level simulator for implementation and evaluation analysis of the proposed support. The SISC-WI protocol was implemented in this simulation environment, requiring significant modifications of existing standard UNISIM simulator modules. The implementation of the SISC-WI protocol in the simulation environment validated the concept.