Parallel knowledge exams include diverse question sets, each with nearly equivalent measuring characteristics that make them interchangeable. They are suitable when multiple test-takers participate either simultaneously or separately, as long as the results remain comparable. To ensure unbiased testing and balance between the measuring properties of varying test versions, automating the creation of parallel tests is vital. This reduces potential examiner errors and saves time, especially in large-scale tests. Given that automated parallel testing assembly (APTA) is a part of NP-hard combinatorial optimization problems, employing heuristics is both anticipated and necessary. As the APTA issue parallels some existing combinatorial optimization problems, the same heuristics applied to those can also resolve APTA.

This dissertation surveys available formulations of this issue, their mathematical models, and the utilized heuristics in resolving different problem forms. It initially classifies problem formulations and heuristic solutions independently, then cross-classifies them to identify unexplored combinations for problem solving. The heuristics mainly applied to ASPT issues are improvement heuristics, which halt either at a preset execution time or upon attaining the desired solution quality. Constructive heuristics help in creating initial solutions for improvement heuristics.

The dissertation primarily proposes a new efficient, polynomial complexity method for completely resolving APTA issues. This method adapts the constructive heuristic suggested by Nawaz, Enschore, and Ham for one form of the bin packing issue, which has yet to be applied to APTA issues. The new method is distinctive for its predictable execution time, efficiency, and ease of implementation.

This approach is particularly useful where frequent testing occurs among a relatively small group and computing resources for ASPT are limited. The proposed APTA approach has been implemented and compared with effective, comparable, improvement-heuristic methods like simulated annealing (SA) and variable neighbourhood search (VNS). The execution time of the proposed algorithm is markedly shorter than the SA algorithm, while quality suffers only negligibly. In comparison with the VNS algorithm, average execution time is significantly shorter, and when the execution time is the same, the proposed algorithm delivers higher-quality results for a relatively small number of parallel tests and item banks commonly seen in educational testing.