The dramatic rise in internet connectible digital multimedia devices in contemporary homes, including smartphones, tablets, digital TVs and set-top boxes, has simplified the development of distributed applications. Existing systems in the field of Human-Computer Interaction (HCI) which meld digital TV and mobile devices in domestic settings have a tendency towards ad-hoc implementations with slight flexibility and limited scope to explore varying HCI scenario combinations. 

This thesis is an introduction to the SHARP development framework, optimized for the efficient development of distributed systems in an integrated digital TV, mobile devices, and internet environment. The framework aims to aid HCI researchers in constructing creative applications with an array of HCI scenarios for a living room setting with less effort. 

An initial survey shows an overview of HCI systems specifically designed for the living room, from which common characteristics were extracted. Subsequently, a range of HCI scenario offerings identified for integrated environment applications were listed, including sharing content across multiple screens, controlling central screen actions via mobile devices, motion detection, supplementary sensory feedback, and combining passive TV viewing with simultaneous interactions. The SHARP framework's design then allows these scenarios to be included in app development. 

The gaming industry, given its proven popularity and profitability, was chosen as the area to validate the framework's advantages. Five games developed via the SHARP framework validated its flexibility and potential for creating fresh applications with innovative scenario combinations. User acceptance was evaluated from 59 test users' experiences with the developed games. 

Comparisons between the complexity and responsiveness of the applications developed with and without the framework confirmed the benefits of SHARP. It reduced both development and testing workloads by consolidating game-essential complex logic into the reusable components of the framework. Despite an overhead leading to a slightly longer response time with the framework, all versions remained within acceptable performance parameters.