This study hypothesized that the resources of chip multiprocessors (CMP) with added hardware/software support for Thread Level Speculation (TLS) can be utilized for the execution of prevalent sequential applications. Existing CMPs with TLS support, however, often need significant additional hardware and software resources for specific operations during speculative execution of these applications. A comprehensive comparative analysis of speculative CMPs was therefore carried out, focusing on hardware and software support for speculation at both register and memory levels. 

The systems were categorized according to their register file organization, interconnection topology, registration communication mechanisms, misspeculation recovery techniques, as well as performances and scalability. Memory level communication was classified by memory hierarchy, and hardware/software support complexity was examined. The analysis also considered potential performance impairment causes like thread commit burst traffic and unsuitable cache memories replacement algorithm. 

Based on this analysis, this study proposed a more cost-effective and efficient alternative: a CMP with simpler TLS support, allowing speculative threads to communicate at both register and memory levels. This new speculative CMP belonged to systems with essentially generic architecture but enhanced with register and memory speculative communication support. The proposed system had four processing cores, private data, and instruction L1 caches connected to a shared L2 cache through a mutual bus. 

Speculative parallelization was implemented at loop level with speculative threads corresponding to loop iterations. These threads were identified using a binary annotator, a unique software, for controlling register-level communication. Memory values that were speculatively produced were kept in private L1 caches, with shared L2 cache storing the sequential state. 

This solution supported dynamic identification of data dependence violations and recovery from misspeculation. A qualitative comparison of the SIC and ESIC protocols suggested a potential performance gain in the ESIC. The proposed memory protocols integrated cache coherence with speculation support. 

A new simulation environment based on the UNISIM modular cycle-level simulator was developed, with the SISC-WI protocol chosen for implementation in this environment. This necessitated major modifications to some standard UNISIM simulator modules and the addition of three new modules. Finally, the implementation of the SISC-WI protocol in the simulator confirmed the concept's validity.